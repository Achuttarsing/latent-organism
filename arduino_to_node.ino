/*Pressure Sensor Matrix Codeparsing through a pressure sensor matrix grid by switching individualrows/columns to be HIGH, LOW or INPUT (high impedance) to detectlocation and pressure.>> https://www.kobakant.at/DIY/?p=7443*/#define numRows 2//3#define numCols 2//3#define sensorPoints numRows*numColsint rows[] = {A0, A1, A2};int cols[] = {5, 6, 7};int rows2[] = {A2, A3};int cols2[] = {3, 4};// to editint rows3[] = {A4, A5};int cols3[] = {1, 2};int rows4[] = {A2, A3};int cols4[] = {3, 4};int rows5[] = {A2, A3};int cols5[] = {3, 4};int rows6[] = {A2, A3};int cols6[] = {3, 4};int rows7[] = {A2, A3};int cols7[] = {3, 4};//int incomingValues[sensorPoints] = {};int incomingValues2[sensorPoints] = {};int incomingValues3[sensorPoints] = {};int incomingValues4[sensorPoints] = {};int incomingValues5[sensorPoints] = {};int incomingValues6[sensorPoints] = {};int incomingValues7[sensorPoints] = {};void setup() {// set all rows and columns to INPUT (high impedance):for (int i = 0; i < numRows; i++) {  pinMode(rows[i], INPUT_PULLUP);  pinMode(rows2[i], INPUT_PULLUP);  pinMode(rows3[i], INPUT_PULLUP);  pinMode(rows4[i], INPUT_PULLUP);  pinMode(rows5[i], INPUT_PULLUP);  pinMode(rows6[i], INPUT_PULLUP);  pinMode(rows7[i], INPUT_PULLUP);}for (int i = 0; i < numCols; i++) {  pinMode(cols[i], INPUT);  pinMode(cols2[i], INPUT);  pinMode(cols3[i], INPUT);  pinMode(cols4[i], INPUT);  pinMode(cols5[i], INPUT);  pinMode(cols6[i], INPUT);  pinMode(cols7[i], INPUT);}Serial.begin(9600);}void loop() {for (int colCount = 0; colCount < numCols; colCount++) {  pinMode(cols[colCount], OUTPUT); // set as OUTPUT  digitalWrite(cols[colCount], LOW); // set LOW    pinMode(cols2[colCount], OUTPUT); // set as OUTPUT  digitalWrite(cols2[colCount], LOW); // set LOW    pinMode(cols3[colCount], OUTPUT); // set as OUTPUT  digitalWrite(cols3[colCount], LOW); // set LOW    pinMode(cols4[colCount], OUTPUT); // set as OUTPUT  digitalWrite(cols4[colCount], LOW); // set LOW    pinMode(cols5[colCount], OUTPUT); // set as OUTPUT  digitalWrite(cols5[colCount], LOW); // set LOW    pinMode(cols6[colCount], OUTPUT); // set as OUTPUT  digitalWrite(cols6[colCount], LOW); // set LOW    pinMode(cols7[colCount], OUTPUT); // set as OUTPUT  digitalWrite(cols7[colCount], LOW); // set LOW  for (int rowCount = 0; rowCount < numRows; rowCount++) {    incomingValues[colCount * numRows + rowCount] = analogRead(rows[rowCount]); // read INPUT    incomingValues2[colCount * numRows + rowCount] = analogRead(rows2[rowCount]); // read INPUT    incomingValues3[colCount * numRows + rowCount] = analogRead(rows3[rowCount]); // read INPUT    incomingValues4[colCount * numRows + rowCount] = analogRead(rows4[rowCount]); // read INPUT    incomingValues5[colCount * numRows + rowCount] = analogRead(rows5[rowCount]); // read INPUT    incomingValues6[colCount * numRows + rowCount] = analogRead(rows6[rowCount]); // read INPUT    incomingValues7[colCount * numRows + rowCount] = analogRead(rows7[rowCount]); // read INPUT  }// end rowCount  pinMode(cols[colCount], INPUT); // set back to INPUT!  pinMode(cols2[colCount], INPUT);  pinMode(cols3[colCount], INPUT);  pinMode(cols4[colCount], INPUT);  pinMode(cols5[colCount], INPUT);  pinMode(cols6[colCount], INPUT);  pinMode(cols7[colCount], INPUT);}// end colCount// Print the incoming values of the grid:for (int i = 0; i < sensorPoints; i++) {  Serial.print("[");  Serial.print(incomingValues[i]);  Serial.print(",");  Serial.print(incomingValues2[i]);  Serial.print(",");  Serial.print(incomingValues3[i]);  Serial.print(",");  Serial.print(incomingValues4[i]);  Serial.print(",");  Serial.print(incomingValues5[i]);  Serial.print(",");  Serial.print(incomingValues6[i]);  Serial.print(",");  Serial.print(incomingValues7[i]);  Serial.print("]");  Serial.println('\t');}Serial.println();delay(10);}